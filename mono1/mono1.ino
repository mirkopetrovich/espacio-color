#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel pixels(128, 6, NEO_GRB + NEO_KHZ800);
const bool mono[] = { 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 
                      1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1,
                      1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,
                      1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1,
                      1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1,
                      1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1,
                      1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                      1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,
                      1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                      1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
                      0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
                      1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
                      1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1,
                      1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,
                      1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1,
                      1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0 };

const unsigned bool bocho[] = { 1, 1, 1, 1, 0, 1, 1, 0,    // 246
                                1, 1, 0, 1, 1, 1, 1, 1,    // 223
                                1, 0, 0, 1, 0, 0, 1, 0,    // 146
                                0, 1, 0, 1, 1, 1, 1, 1,    // 95
                                0, 0, 0, 1, 1, 1, 1, 1,    // 31
                                0, 0, 1, 1, 1, 1, 1, 1,    // 63
                                0, 0, 1, 0, 1, 1, 0, 0,    // 44
                                1, 1, 1, 1, 1, 0, 1, 1,    // 251
                                0, 1, 1, 1, 1, 0, 0, 1,    // 121
                                0, 0, 1, 1, 1, 1, 1, 0,    // 62
                                0, 1, 1, 1, 0, 0, 1, 1,    // 115
                                1, 1, 1, 1, 1, 1, 0, 0,    // 252
                                1, 1, 1, 1, 0, 1, 1, 1,    // 247
                                1, 1, 1, 1, 0, 0, 1, 0,    // 242
                                1, 0, 1, 0, 0, 1, 0, 0,    // 164
                                1, 1, 1, 1, 0, 1, 1, 1,    // 247
                                1, 1, 0, 1, 1, 1, 1, 1,    // 223
                                1, 1, 1, 0, 1, 1, 1, 1,    // 239
                                0, 0, 1, 1, 1, 1, 0, 1,    // 61
                                0, 1, 0, 1, 1, 1, 1, 1,    // 95
                                0, 1, 1, 0, 1, 1, 1, 0,    // 110
                                1, 0, 1, 1, 1, 0, 1, 0,    // 186
                                1, 1, 1, 0, 1, 1, 1, 1,    // 239
                                0, 0, 1, 0, 0, 1, 0, 0,    // 36
                                1, 1, 1, 1, 1, 0, 1, 0,    // 250
                                1, 1, 0, 1, 1, 0, 1, 1,    // 219
                                1, 0, 1, 1, 1, 1, 0, 0,    // 188
                                1, 1, 0, 1, 0, 0, 1, 1,    // 211
                                1, 1, 1, 1, 1, 0, 0, 1,    // 249
                                1, 0, 1, 0, 0, 1, 0, 0 };  // 164


const unsigned char pocho[] = { 246, 223, 146, 95, 31, 63, 44, 251, 121, 62, 115, 252, 247, 242, 164, 247, 223, 239, 61, 95, 110, 186, 239, 36, 250, 219, 188, 211, 249, 164 };



const uint8_t kMatrixWidth = 16;
const uint8_t kMatrixHeight = 8;
#define LAST_VISIBLE_LED 127

void setup() {
  pixels.begin();
  pixels.clear();
}

void loop() {
  rhex(10, 0, 2);
  rhex(12, 4, 2);
  rhex(10, 8, 2);
  rhex(11, 12, 2);
  pixels.show();
  delay(300);
  pixels.clear();
}

void rhex(int numero, int posX, int posY) {
  for (int i = 0; i < 15; i++) {
    if (mono[i + (numero * 15)]) pixels.setPixelColor(XY((i % 3 + posX), floor(i / 3) + posY), pixels.Color(255, 200, 20));
  }
}

uint8_t XY(uint8_t x, uint8_t y) {
  if ((x >= kMatrixWidth) || (y >= kMatrixHeight)) {
    return (LAST_VISIBLE_LED + 1);
  }
  const uint8_t XYTable[] = {
    7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127,
    6, 14, 22, 30, 38, 46, 54, 62, 70, 78, 86, 94, 102, 110, 118, 126,
    5, 13, 21, 29, 37, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125,
    4, 12, 20, 28, 36, 44, 52, 60, 68, 76, 84, 92, 100, 108, 116, 124,
    3, 11, 19, 27, 35, 43, 51, 59, 67, 75, 83, 91, 99, 107, 115, 123,
    2, 10, 18, 26, 34, 42, 50, 58, 66, 74, 82, 90, 98, 106, 114, 122,
    1, 9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89, 97, 105, 113, 121,
    0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120
  };

  uint8_t i = (y * kMatrixWidth) + x;
  uint8_t j = XYTable[i];
  return j;
}