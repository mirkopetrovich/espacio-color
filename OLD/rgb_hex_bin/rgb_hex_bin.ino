#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel pixels_RGB(320, 6, NEO_GRB + NEO_KHZ800);


int alto = 5;
int ancho = 3;
int pixeles = alto * ancho;
int offset = ancho + 1;
int seg = 0;

const bool mono[] = { 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,    // 0
                      1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1,    // 1
                      1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,    // 2
                      1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1,    // 3
                      1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1,    // 4
                      1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1,    // 5
                      1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,    // 6
                      1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,    // 7
                      1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,    // 8
                      1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,    // 9
                      0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,    // A
                      1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0,    // B
                      1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1,    // C
                      1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,    // D
                      1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1,    // E
                      1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0 };  // F

 /* const uint16_t XYTable[] = {
    7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127, 135, 143, 151, 159, 167, 175, 183, 191, 199, 207, 215, 223, 231, 239, 247, 255, 263, 271, 279, 287, 295, 303, 311, 319,
    6, 14, 22, 30, 38, 46, 54, 62, 70, 78, 86, 94, 102, 110, 118, 126, 134, 142, 150, 158, 166, 174, 182, 190, 198, 206, 214, 222, 230, 238, 246, 254, 262, 270, 278, 286, 294, 302, 310, 318,
    5, 13, 21, 29, 37, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 149, 157, 165, 173, 181, 189, 197, 205, 213, 221, 229, 237, 245, 253, 261, 269, 277, 285, 293, 301, 309, 317,
    4, 12, 20, 28, 36, 44, 52, 60, 68, 76, 84, 92, 100, 108, 116, 124, 132, 140, 148, 156, 164, 172, 180, 188, 196, 204, 212, 220, 228, 236, 244, 252, 260, 268, 276, 284, 292, 300, 308, 316,
    3, 11, 19, 27, 35, 43, 51, 59, 67, 75, 83, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187, 195, 203, 211, 219, 227, 235, 243, 251, 259, 267, 275, 283, 291, 299, 307, 315,
    2, 10, 18, 26, 34, 42, 50, 58, 66, 74, 82, 90, 98, 106, 114, 122, 130, 138, 146, 154, 162, 170, 178, 186, 194, 202, 210, 218, 226, 234, 242, 250, 258, 266, 274, 282, 290, 298, 306, 314,
    1, 9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89, 97, 105, 113, 121, 129, 137, 145, 153, 161, 169, 177, 185, 193, 201, 209, 217, 225, 233, 241, 249, 257, 265, 273, 281, 289, 297, 305, 313,
    0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 168, 176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256, 264, 272, 280, 288, 296, 304, 312
  };*/

  const uint16_t XYTable[] = {
    319, 318, 317, 316, 315, 314, 313, 312,
    255, 254, 253, 252, 251, 250, 249, 248,
    191, 190, 189, 188, 187, 186, 185, 184,
    127, 126, 125, 124, 123, 122, 121, 120,
    63, 62, 61, 60, 59, 58, 57, 56,
    311, 310, 309, 308, 307, 306, 305, 304,
    247, 246, 245, 244, 243, 242, 241, 240,
    183, 182, 181, 180, 179, 178, 177, 176,
    119, 118, 117, 116, 115, 114, 113, 112,
    55, 54, 53, 52, 51, 50, 49, 48,
    303, 302, 301, 300, 299, 298, 297, 296,
    239, 238, 237, 236, 235, 234, 233, 232,
    175, 174, 173, 172, 171, 170, 169, 168,
    111, 110, 109, 108, 107, 106, 105, 104,
    47, 46, 45, 44, 43, 42, 41, 40,
    295, 294, 293, 292, 291, 290, 289, 288,
    231, 230, 229, 228, 227, 226, 225, 224,
    167, 166, 165, 164, 163, 162, 161, 160,
    103, 102, 101, 100, 99, 98, 97, 96,
    39, 38, 37, 36, 35, 34, 33, 32,
    287, 286, 285, 284, 283, 282, 281, 280,
    223, 222, 221, 220, 219, 218, 217, 216,
    159, 158, 157, 156, 155, 154, 153, 152,
    95, 94, 93, 92, 91, 90, 89, 88,
    31, 30, 29, 28, 27, 26, 25, 24,
    279, 278, 277, 276, 275, 274, 273, 272,
    215, 214, 213, 212, 211, 210, 209, 208,
    151, 150, 149, 148, 147, 146, 145, 144,
    87, 86, 85, 84, 83, 82, 81, 80,
    23, 22, 21, 20, 19, 18, 17, 16,
    271, 270, 269, 268, 267, 266, 265, 264,
    207, 206, 205, 204, 203, 202, 201, 200,
    143, 142, 141, 140, 139, 138, 137, 136,
    79, 78, 77, 76, 75, 74, 73, 72,
    15, 14, 13, 12, 11, 10, 9, 8,
    263, 262, 261, 260, 259, 258, 257, 256,
    199, 198, 197, 196, 195, 194, 193, 192,
    135, 134, 133, 132, 131, 130, 129, 128,
    71, 70, 69, 68, 67, 66, 65, 64,
    7, 6, 5, 4, 3, 2, 1, 0

  };

void setup() {
  pixels_RGB.begin();
  pixels_RGB.clear();

}

void loop() {
  pixels_RGB.clear();


  /*turing(((seg/4096)%16),0,2);
  turing(((seg/256)%16),offset*1,2);
  turing(((seg/16)%16),offset*2,2);
  turing((seg%16),offset*3,2);*/


  // RGB

 turing((seg/100)%10,0,2);
  turing((seg/10)%10,offset*1,2);
  turing(seg%10,offset*2,2);

  turing((seg/100)%10,offset*3+2,2);
  turing((seg/10)%10,offset*4+2,2);
  turing(seg%10,offset*5+2,2);

  turing((seg/100)%10,offset*7,2);
  turing((seg/10)%10,offset*8,2);
  turing(seg%10,offset*9,2);

  //HEX

  /*turing(((seg/16)%16),0,2);
  turing((seg%16),offset*1,2);
  turing(((seg/16)%16),offset*2,2);
  turing((seg%16),offset*3,2);
  turing(((seg/16)%16),offset*4,2);
  turing((seg%16),offset*5,2);*/

  //BIN

  /*turing(((seg/128)%2),0,2);
  turing(((seg/64)%2),offset*1,2);
  turing(((seg/32)%2),offset*2,2);
  turing(((seg/16)%2),offset*3,2);
  turing(((seg/8)%2),offset*4,2);
  turing(((seg/4)%2),offset*5,2);
  turing(((seg/2)%2),offset*6,2);
  turing((seg%2),offset*7,2);*/




  pixels_RGB.show();
  delay(300);
   seg++;
   if (seg >= 256) seg = 0;
}

void turing(int numero, int posX, int posY) {
  for (int i = 0; i < pixeles; i++) {
    if (mono[i + (numero * pixeles)]) pixels_RGB.setPixelColor(XY((i % ancho + posX), floor(i / ancho) + posY), pixels_RGB.Color(255, 180, 100));
  }
}

uint16_t XY(uint16_t x, uint16_t y) {
  uint16_t i = (y * 40) + x;
  uint16_t j = XYTable[i];
  return j;
}
